// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.RemoteApp;
using Microsoft.Azure.Management.RemoteApp.Model;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RemoteApp
{
    /// <summary>
    /// RemoteApp collection operations.
    /// </summary>
    internal partial class CollectionOperations : IServiceOperations<RemoteAppManagementClient>, ICollectionOperations
    {
        /// <summary>
        /// Initializes a new instance of the CollectionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal CollectionOperations(RemoteAppManagementClient client)
        {
            this._client = client;
        }
        
        private RemoteAppManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RemoteApp.RemoteAppManagementClient.
        /// </summary>
        public RemoteAppManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets the collection details.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='collectionName'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the get collection operation.
        /// </returns>
        public async Task<GetCollectionOperationResult> GetAsync(string resourceGroupName, string collectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (collectionName == null)
            {
                throw new ArgumentNullException("collectionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("collectionName", collectionName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ArmNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ArmNamespace);
            }
            url = url + "/collections/";
            url = url + Uri.EscapeDataString(collectionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetCollectionOperationResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetCollectionOperationResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Collection collectionInstance = new Collection();
                            result.Collection = collectionInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                CollectionProperties propertiesInstance = new CollectionProperties();
                                collectionInstance.Properties = propertiesInstance;
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    propertiesInstance.Name = nameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken goldImageNameValue = propertiesValue["goldImageName"];
                                if (goldImageNameValue != null && goldImageNameValue.Type != JTokenType.Null)
                                {
                                    string goldImageNameInstance = ((string)goldImageNameValue);
                                    propertiesInstance.TemplateImageName = goldImageNameInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    string statusInstance = ((string)statusValue);
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken lastErrorCodeValue = propertiesValue["lastErrorCode"];
                                if (lastErrorCodeValue != null && lastErrorCodeValue.Type != JTokenType.Null)
                                {
                                    string lastErrorCodeInstance = ((string)lastErrorCodeValue);
                                    propertiesInstance.LastErrorCode = lastErrorCodeInstance;
                                }
                                
                                JToken vnetNameValue = propertiesValue["vnetName"];
                                if (vnetNameValue != null && vnetNameValue.Type != JTokenType.Null)
                                {
                                    string vnetNameInstance = ((string)vnetNameValue);
                                    propertiesInstance.VNetName = vnetNameInstance;
                                }
                                
                                JToken adInfoValue = propertiesValue["adInfo"];
                                if (adInfoValue != null && adInfoValue.Type != JTokenType.Null)
                                {
                                    ActiveDirectoryConfig adInfoInstance = new ActiveDirectoryConfig();
                                    propertiesInstance.AdInfo = adInfoInstance;
                                    
                                    JToken domainNameValue = adInfoValue["DomainName"];
                                    if (domainNameValue != null && domainNameValue.Type != JTokenType.Null)
                                    {
                                        string domainNameInstance = ((string)domainNameValue);
                                        adInfoInstance.DomainName = domainNameInstance;
                                    }
                                    
                                    JToken organizationalUnitValue = adInfoValue["OrganizationalUnit"];
                                    if (organizationalUnitValue != null && organizationalUnitValue.Type != JTokenType.Null)
                                    {
                                        string organizationalUnitInstance = ((string)organizationalUnitValue);
                                        adInfoInstance.OrganizationalUnit = organizationalUnitInstance;
                                    }
                                    
                                    JToken serviceAccountUserNameValue = adInfoValue["ServiceAccountUserName"];
                                    if (serviceAccountUserNameValue != null && serviceAccountUserNameValue.Type != JTokenType.Null)
                                    {
                                        string serviceAccountUserNameInstance = ((string)serviceAccountUserNameValue);
                                        adInfoInstance.UserName = serviceAccountUserNameInstance;
                                    }
                                    
                                    JToken serviceAccountPasswordValue = adInfoValue["ServiceAccountPassword"];
                                    if (serviceAccountPasswordValue != null && serviceAccountPasswordValue.Type != JTokenType.Null)
                                    {
                                        string serviceAccountPasswordInstance = ((string)serviceAccountPasswordValue);
                                        adInfoInstance.Password = serviceAccountPasswordInstance;
                                    }
                                }
                                
                                JToken planNameValue = propertiesValue["planName"];
                                if (planNameValue != null && planNameValue.Type != JTokenType.Null)
                                {
                                    string planNameInstance = ((string)planNameValue);
                                    propertiesInstance.PlanName = planNameInstance;
                                }
                                
                                JToken customRdpPropertyValue = propertiesValue["customRdpProperty"];
                                if (customRdpPropertyValue != null && customRdpPropertyValue.Type != JTokenType.Null)
                                {
                                    string customRdpPropertyInstance = ((string)customRdpPropertyValue);
                                    propertiesInstance.CustomRdpProperty = customRdpPropertyInstance;
                                }
                                
                                JToken readyForPublishingValue = propertiesValue["readyForPublishing"];
                                if (readyForPublishingValue != null && readyForPublishingValue.Type != JTokenType.Null)
                                {
                                    bool readyForPublishingInstance = ((bool)readyForPublishingValue);
                                    propertiesInstance.ReadyForPublishing = readyForPublishingInstance;
                                }
                                
                                JToken lastModifiedTimeUtcValue = propertiesValue["lastModifiedTimeUtc"];
                                if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                                {
                                    DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                    propertiesInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                                }
                                
                                JToken modeValue = propertiesValue["mode"];
                                if (modeValue != null && modeValue.Type != JTokenType.Null)
                                {
                                    CollectionMode modeInstance = ((CollectionMode)Enum.Parse(typeof(CollectionMode), ((string)modeValue), true));
                                    propertiesInstance.Mode = modeInstance;
                                }
                                
                                JToken locationValue = propertiesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    propertiesInstance.Location = locationInstance;
                                }
                                
                                JToken maxSessionsValue = propertiesValue["maxSessions"];
                                if (maxSessionsValue != null && maxSessionsValue.Type != JTokenType.Null)
                                {
                                    int maxSessionsInstance = ((int)maxSessionsValue);
                                    propertiesInstance.MaxSessions = maxSessionsInstance;
                                }
                                
                                JToken sessionWarningThresholdValue = propertiesValue["sessionWarningThreshold"];
                                if (sessionWarningThresholdValue != null && sessionWarningThresholdValue.Type != JTokenType.Null)
                                {
                                    int sessionWarningThresholdInstance = ((int)sessionWarningThresholdValue);
                                    propertiesInstance.SessionWarningThreshold = sessionWarningThresholdInstance;
                                }
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    CollectionType typeInstance = ((CollectionType)Enum.Parse(typeof(CollectionType), ((string)typeValue), true));
                                    propertiesInstance.Type = typeInstance;
                                }
                                
                                JToken officeTypeValue = propertiesValue["officeType"];
                                if (officeTypeValue != null && officeTypeValue.Type != JTokenType.Null)
                                {
                                    OfficeType officeTypeInstance = ((OfficeType)Enum.Parse(typeof(OfficeType), ((string)officeTypeValue), true));
                                    propertiesInstance.OfficeType = officeTypeInstance;
                                }
                                
                                JToken trialOnlyValue = propertiesValue["trialOnly"];
                                if (trialOnlyValue != null && trialOnlyValue.Type != JTokenType.Null)
                                {
                                    bool trialOnlyInstance = ((bool)trialOnlyValue);
                                    propertiesInstance.TrialOnly = trialOnlyInstance;
                                }
                                
                                JToken dnsServersArray = propertiesValue["DnsServers"];
                                if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                    {
                                        propertiesInstance.DnsServers.Add(((string)dnsServersValue));
                                    }
                                }
                                
                                JToken subnetNameValue = propertiesValue["subnetName"];
                                if (subnetNameValue != null && subnetNameValue.Type != JTokenType.Null)
                                {
                                    string subnetNameInstance = ((string)subnetNameValue);
                                    propertiesInstance.SubnetName = subnetNameInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                collectionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                collectionInstance.Name = nameInstance2;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                collectionInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    collectionInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                collectionInstance.Type = typeInstance2;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                collectionInstance.Etag = etagInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                collectionInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of collections details in the resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response for the list collection operation.
        /// </returns>
        public async Task<ListCollectionOperationResult> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ArmNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ArmNamespace);
            }
            url = url + "/collections";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-09-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ListCollectionOperationResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ListCollectionOperationResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken collectionsArray = responseDoc;
                            if (collectionsArray != null && collectionsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken collectionsValue in ((JArray)collectionsArray))
                                {
                                    Collection collectionInstance = new Collection();
                                    result.Collections.Add(collectionInstance);
                                    
                                    JToken propertiesValue = collectionsValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        CollectionProperties propertiesInstance = new CollectionProperties();
                                        collectionInstance.Properties = propertiesInstance;
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken nameValue = propertiesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            propertiesInstance.Name = nameInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken goldImageNameValue = propertiesValue["goldImageName"];
                                        if (goldImageNameValue != null && goldImageNameValue.Type != JTokenType.Null)
                                        {
                                            string goldImageNameInstance = ((string)goldImageNameValue);
                                            propertiesInstance.TemplateImageName = goldImageNameInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            string statusInstance = ((string)statusValue);
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken lastErrorCodeValue = propertiesValue["lastErrorCode"];
                                        if (lastErrorCodeValue != null && lastErrorCodeValue.Type != JTokenType.Null)
                                        {
                                            string lastErrorCodeInstance = ((string)lastErrorCodeValue);
                                            propertiesInstance.LastErrorCode = lastErrorCodeInstance;
                                        }
                                        
                                        JToken vnetNameValue = propertiesValue["vnetName"];
                                        if (vnetNameValue != null && vnetNameValue.Type != JTokenType.Null)
                                        {
                                            string vnetNameInstance = ((string)vnetNameValue);
                                            propertiesInstance.VNetName = vnetNameInstance;
                                        }
                                        
                                        JToken adInfoValue = propertiesValue["adInfo"];
                                        if (adInfoValue != null && adInfoValue.Type != JTokenType.Null)
                                        {
                                            ActiveDirectoryConfig adInfoInstance = new ActiveDirectoryConfig();
                                            propertiesInstance.AdInfo = adInfoInstance;
                                            
                                            JToken domainNameValue = adInfoValue["DomainName"];
                                            if (domainNameValue != null && domainNameValue.Type != JTokenType.Null)
                                            {
                                                string domainNameInstance = ((string)domainNameValue);
                                                adInfoInstance.DomainName = domainNameInstance;
                                            }
                                            
                                            JToken organizationalUnitValue = adInfoValue["OrganizationalUnit"];
                                            if (organizationalUnitValue != null && organizationalUnitValue.Type != JTokenType.Null)
                                            {
                                                string organizationalUnitInstance = ((string)organizationalUnitValue);
                                                adInfoInstance.OrganizationalUnit = organizationalUnitInstance;
                                            }
                                            
                                            JToken serviceAccountUserNameValue = adInfoValue["ServiceAccountUserName"];
                                            if (serviceAccountUserNameValue != null && serviceAccountUserNameValue.Type != JTokenType.Null)
                                            {
                                                string serviceAccountUserNameInstance = ((string)serviceAccountUserNameValue);
                                                adInfoInstance.UserName = serviceAccountUserNameInstance;
                                            }
                                            
                                            JToken serviceAccountPasswordValue = adInfoValue["ServiceAccountPassword"];
                                            if (serviceAccountPasswordValue != null && serviceAccountPasswordValue.Type != JTokenType.Null)
                                            {
                                                string serviceAccountPasswordInstance = ((string)serviceAccountPasswordValue);
                                                adInfoInstance.Password = serviceAccountPasswordInstance;
                                            }
                                        }
                                        
                                        JToken planNameValue = propertiesValue["planName"];
                                        if (planNameValue != null && planNameValue.Type != JTokenType.Null)
                                        {
                                            string planNameInstance = ((string)planNameValue);
                                            propertiesInstance.PlanName = planNameInstance;
                                        }
                                        
                                        JToken customRdpPropertyValue = propertiesValue["customRdpProperty"];
                                        if (customRdpPropertyValue != null && customRdpPropertyValue.Type != JTokenType.Null)
                                        {
                                            string customRdpPropertyInstance = ((string)customRdpPropertyValue);
                                            propertiesInstance.CustomRdpProperty = customRdpPropertyInstance;
                                        }
                                        
                                        JToken readyForPublishingValue = propertiesValue["readyForPublishing"];
                                        if (readyForPublishingValue != null && readyForPublishingValue.Type != JTokenType.Null)
                                        {
                                            bool readyForPublishingInstance = ((bool)readyForPublishingValue);
                                            propertiesInstance.ReadyForPublishing = readyForPublishingInstance;
                                        }
                                        
                                        JToken lastModifiedTimeUtcValue = propertiesValue["lastModifiedTimeUtc"];
                                        if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                            propertiesInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                                        }
                                        
                                        JToken modeValue = propertiesValue["mode"];
                                        if (modeValue != null && modeValue.Type != JTokenType.Null)
                                        {
                                            CollectionMode modeInstance = ((CollectionMode)Enum.Parse(typeof(CollectionMode), ((string)modeValue), true));
                                            propertiesInstance.Mode = modeInstance;
                                        }
                                        
                                        JToken locationValue = propertiesValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            propertiesInstance.Location = locationInstance;
                                        }
                                        
                                        JToken maxSessionsValue = propertiesValue["maxSessions"];
                                        if (maxSessionsValue != null && maxSessionsValue.Type != JTokenType.Null)
                                        {
                                            int maxSessionsInstance = ((int)maxSessionsValue);
                                            propertiesInstance.MaxSessions = maxSessionsInstance;
                                        }
                                        
                                        JToken sessionWarningThresholdValue = propertiesValue["sessionWarningThreshold"];
                                        if (sessionWarningThresholdValue != null && sessionWarningThresholdValue.Type != JTokenType.Null)
                                        {
                                            int sessionWarningThresholdInstance = ((int)sessionWarningThresholdValue);
                                            propertiesInstance.SessionWarningThreshold = sessionWarningThresholdInstance;
                                        }
                                        
                                        JToken typeValue = propertiesValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            CollectionType typeInstance = ((CollectionType)Enum.Parse(typeof(CollectionType), ((string)typeValue), true));
                                            propertiesInstance.Type = typeInstance;
                                        }
                                        
                                        JToken officeTypeValue = propertiesValue["officeType"];
                                        if (officeTypeValue != null && officeTypeValue.Type != JTokenType.Null)
                                        {
                                            OfficeType officeTypeInstance = ((OfficeType)Enum.Parse(typeof(OfficeType), ((string)officeTypeValue), true));
                                            propertiesInstance.OfficeType = officeTypeInstance;
                                        }
                                        
                                        JToken trialOnlyValue = propertiesValue["trialOnly"];
                                        if (trialOnlyValue != null && trialOnlyValue.Type != JTokenType.Null)
                                        {
                                            bool trialOnlyInstance = ((bool)trialOnlyValue);
                                            propertiesInstance.TrialOnly = trialOnlyInstance;
                                        }
                                        
                                        JToken dnsServersArray = propertiesValue["DnsServers"];
                                        if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                            {
                                                propertiesInstance.DnsServers.Add(((string)dnsServersValue));
                                            }
                                        }
                                        
                                        JToken subnetNameValue = propertiesValue["subnetName"];
                                        if (subnetNameValue != null && subnetNameValue.Type != JTokenType.Null)
                                        {
                                            string subnetNameInstance = ((string)subnetNameValue);
                                            propertiesInstance.SubnetName = subnetNameInstance;
                                        }
                                    }
                                    
                                    JToken idValue = collectionsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        collectionInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = collectionsValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        collectionInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken locationValue2 = collectionsValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        collectionInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)collectionsValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            collectionInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken typeValue2 = collectionsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        collectionInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken etagValue = collectionsValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        collectionInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken nextLinkValue = collectionsValue["nextLink"];
                                    if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                                    {
                                        string nextLinkInstance = ((string)nextLinkValue);
                                        collectionInstance.NextLink = nextLinkInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
